"""Spoiled GRE simulation sub-routines."""

__all__ = ["SPGRModel"]

from ..base import AbstractModel
from ..base import autocast

import numpy.typing as npt
import torch


class SPGRModel(AbstractModel):
    """
    SPGR transverse signal at time TE after excitation.

    This class models the transverse magnetization signal generated by the
    spoiled gradient echo (SPGR) sequence, calculated at echo time (TE)
    following RF excitation.

    Methods
    -------
    set_properties(T1, T2star, M0=1.0, field_map=0.0, delta_cs=0.0):
        Set tissue and system-specific properties for the SPGR model.

    set_sequence(alpha, TR, TE):
        Set sequence parameters including flip angle, repetition time (TR),
        and echo time (TE).

    _engine(T1, T2star, TR, TE, alpha, M0=1.0, field_map=0.0, delta_cs=0.0):
        Compute the SPGR signal for given tissue, sequence, and field parameters.

    Examples
    --------
    .. exec::

        from mrsim.models import SPGRModel

        model = SPGRModel()
        model.set_properties(T1=1000, T2star=30)
        model.set_sequence(alpha=13.0, TR=10.0, TE=5.0)
        signal = model()

    """

    @autocast
    def set_properties(
        self,
        T1: float | npt.ArrayLike,
        T2star: float | npt.ArrayLike,
        M0: float | npt.ArrayLike = 1.0,
        field_map: float | npt.ArrayLike = 0.0,
        delta_cs: float | npt.ArrayLike = 0.0,
    ):
        """
        Set tissue and system-specific properties for the SPGR model.

        Parameters
        ----------
        T1 : float | npt.ArrayLike
            Longitudinal relaxation time in milliseconds.
        T2star : float | npt.ArrayLike
            Effective transverse relaxation time in milliseconds.
        M0 : float | npt.ArrayLike, optional
            Proton density scaling factor, default is ``1.0``.
        field_map : float | npt.ArrayLike, optional
            Frequency offset map in Hz, default is ``0.0.``
        delta_cs : float | npt.ArrayLik, optional
            Chemical shift in Hz, default is ``0.0``.

        """
        self.properties.T1 = T1 * 1e-3
        self.properties.T2star = T2star * 1e-3
        self.properties.M0 = M0

        # We are assuming Freeman-Hill convention for off-resonance map,
        # so we need to negate to make use with this Ernst-Anderson-based implementation from Hoff
        self.properties.field_map = -2 * torch.pi * field_map
        self.properties.delta_cs = 2 * torch.pi * delta_cs

    @autocast
    def set_sequence(
        self,
        alpha: float | npt.ArrayLike,
        TR: float | npt.ArrayLike,
        TE: float | npt.ArrayLike,
    ):
        """
        Set sequence parameters for the SPGR model.

        Parameters
        ----------
        alpha : float | npt.ArrayLike
            Flip angle in degrees.
        TR : float | npt.ArrayLike
            Repetition time in milliseconds.
        TE : float | npt.ArrayLike
            Echo time in milliseconds.

        """
        self.sequence.alpha = torch.pi * alpha / 180.0
        self.sequence.TR = TR * 1e-3  # ms -> s
        self.sequence.TE = TE * 1e-3  # ms -> s

    @staticmethod
    def _engine(
        T1: float | npt.ArrayLike,
        T2star: float | npt.ArrayLike,
        TR: float | npt.ArrayLike,
        TE: float | npt.ArrayLike,
        alpha: float | npt.ArrayLike,
        M0: float | npt.ArrayLike = 1.0,
        field_map: float | npt.ArrayLike = 0.0,
        delta_cs: float | npt.ArrayLike = 0.0,
    ):
        # Prepare relaxation parameters
        R1, R2star = 1 / T1, 1 / T2star

        # Prepare off resonance
        df = field_map + delta_cs

        # Divide-by-zero risk with PyTorch's nan_to_num
        E1 = torch.exp(-R1 * TR)
        E2 = torch.exp(-R2star * TE)
        Phi = torch.exp(1j * df * TE)

        # Precompute cos, sin
        ca = torch.cos(alpha)
        sa = torch.sin(alpha)

        # Main calculation
        den = 1 - E1 * ca
        Mxy = M0 * ((1 - E1) * sa) / den

        # Add decay
        signal = Mxy * E2

        # Add additional phase factor for readout at TE.
        signal = signal * Phi

        return signal
